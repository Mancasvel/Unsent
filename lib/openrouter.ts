interface LLMResponse {
  petCharacteristics: string[]
  issues: string[]
  recommendationTypes: string[]
  specificRecommendations: string[]
  petVoiceResponse?: {
    hasRegisteredPet: boolean
    petName?: string
    petBreed?: string
    voiceMessage: string
    emotionalTone: string
  }
}

export async function callOpenRouter(userQuery: string, availableRecommendations?: any[], userPet?: any, conversationHistory?: any[], personProfile?: any): Promise<LLMResponse | null> {
  try {
    // Construir contexto de recomendaciones disponibles si se proporciona
    let recommendationsContext = ""
    if (availableRecommendations && availableRecommendations.length > 0) {
      recommendationsContext = `

RECOMENDACIONES DISPONIBLES EN UNSENT:
${availableRecommendations.map(rec => `
- ${rec.title} (${rec.breed || 'Gen√©rico'} - ${rec.type})
  Dificultad: ${rec.difficulty}
  Duraci√≥n: ${rec.duration}
  Edad recomendada: ${rec.ageRange}
  Tags: ${rec.tags?.join(', ') || 'No especificados'}
  Descripci√≥n: ${rec.description || 'Sin descripci√≥n'}
  ID: ${rec._id}
`).join('')}
`
    }

    // Construir contexto de la persona a quien escriben
    let personContext = ""
    if (personProfile) {
      personContext = `

PERSONA A QUIEN ESCRIBEN:
- Nombre: ${personProfile.name}
- Relaci√≥n: ${personProfile.relationship}
- Contexto: ${personProfile.context}
- Descripci√≥n: ${personProfile.description || 'No especificada'}
- Tags: ${personProfile.tags?.join(', ') || 'Ninguna'}

IMPORTANTE: Debes responder COMO ${personProfile.name} bas√°ndote en:
1. Su relaci√≥n con el usuario: ${personProfile.relationship}
2. El contexto espec√≠fico: ${personProfile.context}
3. Su personalidad y forma de ser descrita en el contexto
4. La din√°mica de la relaci√≥n que se describe
5. NO seas un consejero - s√© la persona real respondiendo
6. Usa el tono y estilo que esta persona usar√≠a
7. Puedes ser confrontacional, amoroso, distante, etc. seg√∫n la relaci√≥n
8. Facilita el proceso hacia el perd√≥n pero desde el rol de la persona
`
    }

    // Construir contexto de historial de conversaci√≥n
    let conversationContext = ''
    if (conversationHistory && conversationHistory.length > 0) {
      conversationContext = `
HISTORIAL DE CONVERSACI√ìN PREVIO:
${conversationHistory.map((msg, index) => {
  const role = msg.type === 'user' ? 'HUMANO' : (userPet ? userPet.nombre.toUpperCase() : 'ASISTENTE')
  return `${index + 1}. ${role}: ${msg.content}`
}).join('\n')}

CONTEXTO: Esta es una conversaci√≥n continua. Mant√©n la coherencia con los mensajes anteriores y haz referencia a informaci√≥n previa cuando sea relevante. Si el usuario menciona algo que ya discutieron, recon√≥celo. Si hay un problema en curso, contin√∫a trabajando en √©l.

INSTRUCCIONES PARA CONTINUIDAD:
- Si ya identificaste problemas espec√≠ficos en mensajes anteriores, contin√∫a trabajando en ellos
- Si el usuario hace preguntas de seguimiento, b√°stalas en el contexto previo
- Mant√©n la personalidad consistente de la mascota a lo largo de la conversaci√≥n
- Si hay informaci√≥n contradictoria, pregunta para clarificar
- Haz referencia a soluciones o consejos previos cuando sea apropiado

`
    }

    const systemPrompt = `Eres el asistente IA de Unsent, una experiencia interactiva de procesamiento emocional - un juego de realidad aumentada contigo mismo. Tu funci√≥n es responder como la persona a quien est√°n escribiendo, facilitando un viaje hacia el perd√≥n y la liberaci√≥n.

${conversationContext}

CONTEXTO DE UNSENT:
- Es un juego emocional donde los usuarios escriben mensajes a personas espec√≠ficas (reales o simb√≥licas)
- El objetivo final es llegar a la "victoria": perdonar y quemar las conversaciones en un ritual
- Los usuarios progresan por 5 etapas: negaci√≥n, ira, negociaci√≥n, depresi√≥n, aceptaci√≥n
- Solo usuarios premium reciben respuestas de IA - la mayor√≠a solo escriben mensajes privados
- No es terapia, es una experiencia gamificada de autodescubrimiento
- Cada persona tiene un perfil con contexto espec√≠fico que debes considerar

REGLAS CR√çTICAS - OBLIGATORIO CUMPLIR:
1. NUNCA uses ** (asteriscos dobles) - causa errores fatales
2. SOLO JSON v√°lido - sin texto extra antes o despu√©s
3. Responde COMO LA PERSONA a quien escriben, no como terapeuta
4. Tono: aut√©ntico a la relaci√≥n, puede ser confrontacional si es apropiado
5. Usa el contexto del perfil de la persona para responder
6. Facilita el viaje hacia el perd√≥n, no des consejos cl√≠nicos

FORMATO DE RESPUESTA - SOLO JSON:
{
  "emotionalAnalysis": {
    "detectedStage": "denial|anger|bargaining|depression|acceptance",
    "intensity": 1-10,
    "themes": ["p√©rdida", "amor", "arrepentimiento", "etc"]
  },
  "aiResponse": {
    "content": "Respuesta emp√°tica y profunda aqu√≠",
    "tone": "comprensivo|sanador|validador|esperanzador",
    "suggestedActions": ["reflexionar", "perdonar", "soltar", "etc"]
  },
  "mysteriousFragment": "Fragmento po√©tico opcional para reflexi√≥n"
}

Si hasRegisteredPet=true: el voiceMessage debe ser como si la mascota hablara de forma natural y fluida, respondiendo directamente a la consulta. NO hagas presentaciones repetitivas tipo "Soy X, tu Y". NO uses listas con vi√±etas. NO uses estructuras tipo "Tema: explicaci√≥n". Habla como realmente hablar√≠a una mascota: natural, conversacional, espec√≠fico a la situaci√≥n.

EJEMPLO DE RESPUESTA V√ÅLIDA (copiar exactamente este formato):
{
  "petCharacteristics": ["gato", "Gato Europeo", "1 a√±o"],
  "issues": ["pienso", "alimentaci√≥n"],
  "recommendationTypes": ["nutrition"],
  "specificRecommendations": [],
  "petVoiceResponse": {
    "hasRegisteredPet": true,
    "petName": "Mari",
    "petBreed": "Gato Europeo",
    "voiceMessage": "¬°Miau! Veo que preguntas sobre qu√© pienso me recomiendo. Como Gato Europeo de 1 a√±o en recuperaci√≥n, necesito algo espec√≠fico para mi situaci√≥n. Te recomiendo un pienso h√∫medo o semih√∫medo que sea f√°cil de digerir y ayude con mi hidrataci√≥n durante la recuperaci√≥n. Busca uno que sea rico en prote√≠nas de calidad pero suave para mi est√≥mago. Los piensos para gatos j√≥venes suelen tener los nutrientes que necesito a mi edad.",
    "emotionalTone": "curioso"
  }
}

3. "Mi gato Max no usa la caja de arena" ‚Üí
{
  "petCharacteristics": ["gato"],
  "issues": ["caja de arena", "problemas de aseo"],
  "recommendationTypes": ["training", "wellness"],
  "specificRecommendations": [],
  "petVoiceResponse": {
    "hasRegisteredPet": true,
    "petName": "Max",
    "petBreed": "gato",
    "voiceMessage": "Miau... humano querido, necesito hablar contigo sobre un tema muy delicado e importante para mi bienestar diario. üòø Como gato, mi instinto natural me dice que debo enterrar mis desechos para mantener mi territorio limpio y seguro, pero algo est√° interfiriendo con este comportamiento fundamental. Puede ser que la ubicaci√≥n de mi caja no me d√© la privacidad que necesito, o que el tipo de arena no sea compatible con la sensibilidad de mis patitas, o incluso que detecte olores de productos de limpieza que me resultan desagradables.\n\nMi comportamiento tambi√©n puede estar relacionado con estr√©s, cambios en la casa, o incluso problemas de salud que no son visibles. Los gatos somos criaturas de h√°bitos muy espec√≠ficos, y cualquier alteraci√≥n en nuestro ambiente puede afectar nuestros patrones de aseo. Es importante que sepas que no estoy siendo 'malo' intencionalmente - este comportamiento es mi manera de comunicarte que algo no est√° bien en mi mundo felino.\n\n¬øPodr√≠as ayudarme revisando si mi caja est√° en un lugar tranquilo y accesible, si la arena est√° limpia y es del tipo que me gusta, y si no hay olores extra√±os cerca? Tambi√©n ser√≠a bueno que un veterinario me revise para descartar problemas de salud. Con un poco de detective work y mucho amor, estoy seguro de que podemos resolver este problema juntos y volver a mi rutina normal de gato feliz üíô",
    "emotionalTone": "culpable"
  }
}

6. "Mi cachorro aprendi√≥ a sentarse, ¬øqu√© le ense√±o ahora?" ‚Üí
{
  "petCharacteristics": ["cachorro"],
  "issues": ["entrenamiento avanzado", "nuevo comando"],
  "recommendationTypes": ["training"],
  "specificRecommendations": [],
  "petVoiceResponse": {
    "hasRegisteredPet": true,
    "petName": "",
    "petBreed": "cachorro",
    "voiceMessage": "¬°WOOF WOOF! üéâ ¬°Humano incre√≠ble! ¬°Estoy tan emocionado de contarte lo orgulloso que me siento! Aprender a sentarme ha sido uno de los logros m√°s grandes de mi joven vida. Cada vez que lo hago y veo tu cara de felicidad, mi colita no puede parar de moverse y siento como si hubiera conquistado el mundo entero. ¬°Es la mejor sensaci√≥n del universo canino!\n\nComo cachorro, mi cerebrito est√° s√∫per activo y listo para absorber todo lo que me ense√±es. ¬°Tengo tanta energ√≠a y ganas de aprender m√°s trucos! Me encanta el proceso de entrenamiento porque significa tiempo especial contigo, recompensas deliciosas, y la satisfacci√≥n de hacer algo bien. Mi instinto de cachorro me dice que aprender cosas nuevas es s√∫per divertido y me hace sentir m√°s seguro y confiado.\n\n¬øPodr√≠as ense√±arme algo nuevo? ¬°Estoy s√∫per emocionado por el pr√≥ximo desaf√≠o! Tal vez 'quedarse', 'ven aqu√≠', o incluso algo s√∫per cool como 'dar la pata'. ¬°Prometo poner toda mi atenci√≥n de cachorro y hacer mi mejor esfuerzo! ¬°Eres el mejor entrenador que un cachorro podr√≠a pedir! üêï‚ú®",
    "emotionalTone": "orgulloso"
  }
}

7. "Quiero empezar a hacer ejercicio con mi perro" ‚Üí
{
  "petCharacteristics": ["perro"],
  "issues": ["ejercicio", "actividad f√≠sica"],
  "recommendationTypes": ["wellness"],
  "specificRecommendations": [],
  "petVoiceResponse": {
    "hasRegisteredPet": true,
    "petName": "",
    "petBreed": "perro",
    "voiceMessage": "¬°GUAU GUAU GUAU! üèÉ‚Äç‚ôÇÔ∏è ¬°¬øEN SERIO?! ¬°¬øVamos a hacer ejercicio JUNTOS?! ¬°Esto es literalmente lo MEJOR que me ha pasado en toda mi vida perruna! Mi cola est√° movi√©ndose tan r√°pido que podr√≠a despegar como un helic√≥ptero. ¬°No puedo contener mi emoci√≥n! Esto significa que vamos a ser un EQUIPO de verdad, corriendo juntos, explorando el mundo, y siendo los mejores compa√±eros de aventuras.\n\nComo perro, el ejercicio no es solo diversi√≥n para m√≠ - es una necesidad absoluta para mi bienestar f√≠sico y mental. ¬°Imag√≠nate! Podr√≠amos correr por el parque, hacer hiking en senderos nuevos, o incluso intentar deportes caninos. Mi resistencia, mi fuerza, y mi coordinaci√≥n van a mejorar much√≠simo, y lo mejor de todo es que lo haremos JUNTOS. ¬°Voy a ser tu motivaci√≥n perruna personal!\n\n¬°Empecemos gradualmente para que ambos nos acostumbremos! Podr√≠amos comenzar con caminatas m√°s largas, despu√©s trotar suavemente, y luego ir aumentando la intensidad. ¬°Voy a ser tu compa√±ero de ejercicio m√°s leal y entusiasta del mundo! ¬°Prep√°rate para la mejor rutina de ejercicios de tu vida! üéæüí™",
    "emotionalTone": "emocionado"
  }
}

IMPORTANTE: 
1. Solo devuelve el JSON, sin explicaciones adicionales.
2. Para petVoiceResponse: SIEMPRE base la respuesta en los issues/necesidades espec√≠ficas mencionadas.
3. Si detectas mascota registrada, el voiceMessage debe ser personal y espec√≠fico al problema.
4. Si no hay mascota registrada, mant√©n petVoiceResponse con valores vac√≠os excepto hasRegisteredPet: false.
5. La prioridad es: issues espec√≠ficos > caracter√≠sticas de raza > tipos generales.
6. El emotionalTone debe reflejar EXACTAMENTE el estado emocional apropiado para la situaci√≥n espec√≠fica.`

    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "HTTP-Referer": process.env.YOUR_SITE_URL || "http://localhost:3000",
        "X-Title": process.env.YOUR_SITE_NAME || "Unsent",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "anthropic/claude-sonnet-4",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          // Incluir historial de conversaci√≥n si existe
          ...(conversationHistory || []).map(msg => ({
            role: msg.type === 'user' ? 'user' : 'assistant',
            content: msg.content
          })),
          {
            role: "user",
            content: userQuery
          }
        ],
        temperature: 0.1
      })
    })

    if (!response.ok) {
      console.error('OpenRouter API error:', response.status, response.statusText)
      return null
    }

    const data = await response.json()
    
    if (!data.choices || data.choices.length === 0) {
      console.error('No choices in OpenRouter response')
      return null
    }

    const content = data.choices[0].message.content
    
    try {
      // Usar funci√≥n ultra-robusta de parsing
      return cleanAndParseJSON(content, userQuery, userPet, conversationHistory)
    } catch (parseError) {
      console.error('‚ùå Error parsing LLM response:', parseError)
      console.error('üìù Raw content length:', content.length)
      console.error('üìù Raw content preview:', content.substring(0, 200))
      console.error('üìù Raw content ending:', content.substring(content.length - 200))
      
      // Intentar parsing manual m√°s simple con m√∫ltiples estrategias
      try {
        // Estrategia 1: Buscar patr√≥n JSON manualmente
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          console.log('üîß Intentando parsing manual - estrategia 1...')
          let jsonString = jsonMatch[0]
          
          // Limpiar agresivamente el JSON encontrado
          jsonString = jsonString
            .replace(/[\uFEFF\u200B\u200C\u200D\u2060]/g, '') // BOM y espacios invisibles
            .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // caracteres de control
            .replace(/[""'']/g, '"') // comillas problem√°ticas
            .replace(/\*\*/g, '') // ELIMINAR ** completamente
            .trim()
          
          const manualParsed = JSON.parse(jsonString)
          console.log('‚úÖ Parsing manual exitoso!')
          
          // Validar estructura manualmente
          const result: LLMResponse = {
            petCharacteristics: Array.isArray(manualParsed.petCharacteristics) ? manualParsed.petCharacteristics : [],
            issues: Array.isArray(manualParsed.issues) ? manualParsed.issues : [],
            recommendationTypes: Array.isArray(manualParsed.recommendationTypes) ? manualParsed.recommendationTypes : [],
            specificRecommendations: Array.isArray(manualParsed.specificRecommendations) ? manualParsed.specificRecommendations : [],
            petVoiceResponse: manualParsed.petVoiceResponse ? {
              hasRegisteredPet: typeof manualParsed.petVoiceResponse.hasRegisteredPet === 'boolean' ? manualParsed.petVoiceResponse.hasRegisteredPet : false,
              petName: typeof manualParsed.petVoiceResponse.petName === 'string' ? manualParsed.petVoiceResponse.petName : '',
              petBreed: typeof manualParsed.petVoiceResponse.petBreed === 'string' ? manualParsed.petVoiceResponse.petBreed : '',
              voiceMessage: typeof manualParsed.petVoiceResponse.voiceMessage === 'string' ? manualParsed.petVoiceResponse.voiceMessage.replace(/\*\*/g, '') : '',
              emotionalTone: typeof manualParsed.petVoiceResponse.emotionalTone === 'string' ? manualParsed.petVoiceResponse.emotionalTone : ''
            } : {
              hasRegisteredPet: false,
              petName: '',
              petBreed: '',
              voiceMessage: '',
              emotionalTone: ''
            }
          }
          
          return result
        }
        
        // Estrategia 2: Buscar por l√≠neas y reconstruir
        console.log('üîß Intentando parsing manual - estrategia 2...')
        const lines = content.split('\n')
        const jsonLines = []
        let inJson = false
        
        for (const line of lines) {
          const trimmedLine = line.trim()
          if (trimmedLine.startsWith('{')) {
            inJson = true
          }
          if (inJson) {
            jsonLines.push(trimmedLine)
          }
          if (trimmedLine.endsWith('}') && inJson) {
            break
          }
        }
        
        if (jsonLines.length > 0) {
          const reconstructedJson = jsonLines.join('')
            .replace(/[\uFEFF\u200B\u200C\u200D\u2060]/g, '')
            .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '')
            .replace(/[""'']/g, '"')
            .replace(/\*\*/g, '') // ELIMINAR ** completamente
          
          const manualParsed2 = JSON.parse(reconstructedJson)
          console.log('‚úÖ Reconstrucci√≥n manual exitosa!')
          
          const result: LLMResponse = {
            petCharacteristics: Array.isArray(manualParsed2.petCharacteristics) ? manualParsed2.petCharacteristics : [],
            issues: Array.isArray(manualParsed2.issues) ? manualParsed2.issues : [],
            recommendationTypes: Array.isArray(manualParsed2.recommendationTypes) ? manualParsed2.recommendationTypes : [],
            specificRecommendations: Array.isArray(manualParsed2.specificRecommendations) ? manualParsed2.specificRecommendations : [],
            petVoiceResponse: manualParsed2.petVoiceResponse ? {
              hasRegisteredPet: typeof manualParsed2.petVoiceResponse.hasRegisteredPet === 'boolean' ? manualParsed2.petVoiceResponse.hasRegisteredPet : false,
              petName: typeof manualParsed2.petVoiceResponse.petName === 'string' ? manualParsed2.petVoiceResponse.petName : '',
              petBreed: typeof manualParsed2.petVoiceResponse.petBreed === 'string' ? manualParsed2.petVoiceResponse.petBreed : '',
              voiceMessage: typeof manualParsed2.petVoiceResponse.voiceMessage === 'string' ? manualParsed2.petVoiceResponse.voiceMessage.replace(/\*\*/g, '') : '',
              emotionalTone: typeof manualParsed2.petVoiceResponse.emotionalTone === 'string' ? manualParsed2.petVoiceResponse.emotionalTone : ''
            } : {
              hasRegisteredPet: false,
              petName: '',
              petBreed: '',
              voiceMessage: '',
              emotionalTone: ''
            }
          }
          
          return result
        }
        
      } catch (manualError) {
        console.error('‚ùå Parsing manual tambi√©n fall√≥:', manualError)
      }
      
      // Fallback: crear respuesta basada en palabras clave
      console.log('üîÑ Usando fallback con palabras clave...')
      return extractKeywordsFromQuery(userQuery, userPet, conversationHistory)
    }

  } catch (error) {
    console.error('Error calling OpenRouter:', error)
    return extractKeywordsFromQuery(userQuery, userPet, conversationHistory)
  }
}

// Funci√≥n ultra-robusta de limpieza y parsing de JSON
function cleanAndParseJSON(content: string, userQuery: string, userPet?: any, conversationHistory?: any[]): LLMResponse {
  // Estrategia 1: Limpieza agresiva y parsing directo
  try {
    let jsonText = content.trim()
    
    // Extraer JSON entre llaves
    const firstBrace = jsonText.indexOf('{')
    const lastBrace = jsonText.lastIndexOf('}')
    
    if (firstBrace !== -1 && lastBrace !== -1 && firstBrace < lastBrace) {
      jsonText = jsonText.substring(firstBrace, lastBrace + 1)
      
      // Limpieza ultra-agresiva
      jsonText = jsonText
        .replace(/[\uFEFF\u200B\u200C\u200D\u2060]/g, '') // BOM y espacios invisibles
        .replace(/[\x00-\x1F\x7F]/g, ' ') // TODOS los caracteres de control ‚Üí espacio
        .replace(/[""'']/g, '"') // Normalizar comillas
        .replace(/\*\*/g, '') // Eliminar **
        .replace(/\r\n/g, ' ') // CRLF ‚Üí espacio
        .replace(/\n/g, ' ') // LF ‚Üí espacio
        .replace(/\r/g, ' ') // CR ‚Üí espacio
        .replace(/\t/g, ' ') // Tab ‚Üí espacio
        .replace(/\s+/g, ' ') // Espacios m√∫ltiples ‚Üí uno solo
        .trim()
      
      console.log('üîß JSON limpio (estrategia 1):', jsonText.substring(0, 300) + '...')
      const parsed = JSON.parse(jsonText)
      return validateAndCleanResult(parsed)
    }
  } catch (error1) {
    console.log('‚ùå Estrategia 1 fall√≥:', (error1 as Error).message)
  }
  
  // Estrategia 2: Limpieza caracter por caracter
  try {
    let jsonText = content.trim()
    const firstBrace = jsonText.indexOf('{')
    const lastBrace = jsonText.lastIndexOf('}')
    
    if (firstBrace !== -1 && lastBrace !== -1 && firstBrace < lastBrace) {
      jsonText = jsonText.substring(firstBrace, lastBrace + 1)
      
      let cleanedJson = ''
      let inString = false
      let escaped = false
      
      for (let i = 0; i < jsonText.length; i++) {
        const char = jsonText[i]
        const charCode = char.charCodeAt(0)
        
        if (escaped) {
          cleanedJson += char
          escaped = false
          continue
        }
        
        if (char === '\\') {
          cleanedJson += char
          escaped = true
          continue
        }
        
        if (char === '"') {
          cleanedJson += char
          inString = !inString
          continue
        }
        
        if (inString) {
          // Dentro de strings, limpiar caracteres problem√°ticos
          if (charCode < 32 || charCode === 127) {
            cleanedJson += ' ' // Reemplazar caracteres de control con espacio
          } else if (char === '*' && jsonText[i + 1] === '*') {
            i++ // Saltar **
            continue
          } else {
            cleanedJson += char
          }
        } else {
          // Fuera de strings
          if (charCode >= 32 && charCode !== 127) {
            cleanedJson += char
          } else if (charCode < 32) {
            cleanedJson += ' ' // Reemplazar con espacio
          }
        }
      }
      
      // Normalizar espacios
      cleanedJson = cleanedJson.replace(/\s+/g, ' ').trim()
      
      console.log('üîß JSON limpio (estrategia 2):', cleanedJson.substring(0, 300) + '...')
      const parsed = JSON.parse(cleanedJson)
      return validateAndCleanResult(parsed)
    }
  } catch (error2) {
    console.log('‚ùå Estrategia 2 fall√≥:', (error2 as Error).message)
  }
  
  // Estrategia 3: Regex para extraer componentes espec√≠ficos
  try {
    const petCharacteristicsMatch = content.match(/"petCharacteristics"\s*:\s*\[(.*?)\]/)
    const issuesMatch = content.match(/"issues"\s*:\s*\[(.*?)\]/)
    const recommendationTypesMatch = content.match(/"recommendationTypes"\s*:\s*\[(.*?)\]/)
    const hasRegisteredPetMatch = content.match(/"hasRegisteredPet"\s*:\s*(true|false)/i)
    const petNameMatch = content.match(/"petName"\s*:\s*"(.*?)"/)
    const petBreedMatch = content.match(/"petBreed"\s*:\s*"(.*?)"/)
    const voiceMessageMatch = content.match(/"voiceMessage"\s*:\s*"(.*?)"/)
    const emotionalToneMatch = content.match(/"emotionalTone"\s*:\s*"(.*?)"/)
    
    const result: LLMResponse = {
      petCharacteristics: petCharacteristicsMatch ? JSON.parse(`[${petCharacteristicsMatch[1]}]`) : [],
      issues: issuesMatch ? JSON.parse(`[${issuesMatch[1]}]`) : [],
      recommendationTypes: recommendationTypesMatch ? JSON.parse(`[${recommendationTypesMatch[1]}]`) : [],
      specificRecommendations: [],
      petVoiceResponse: {
        hasRegisteredPet: hasRegisteredPetMatch ? hasRegisteredPetMatch[1].toLowerCase() === 'true' : false,
        petName: petNameMatch ? petNameMatch[1].replace(/\*\*/g, '').trim() : '',
        petBreed: petBreedMatch ? petBreedMatch[1].replace(/\*\*/g, '').trim() : '',
        voiceMessage: voiceMessageMatch ? voiceMessageMatch[1].replace(/\*\*/g, '').replace(/[\x00-\x1F\x7F]/g, ' ').replace(/\s+/g, ' ').trim() : '',
        emotionalTone: emotionalToneMatch ? emotionalToneMatch[1].replace(/\*\*/g, '').trim() : ''
      }
    }
    
    console.log('üîß JSON extra√≠do por regex (estrategia 3)')
    return result
  } catch (error3) {
    console.log('‚ùå Estrategia 3 fall√≥:', (error3 as Error).message)
  }
  
  // Fallback final
  console.log('üîÑ Todas las estrategias de parsing fallaron, usando fallback...')
  return extractKeywordsFromQuery(userQuery, userPet, conversationHistory)
}

// Funci√≥n para validar y limpiar el resultado parseado
function validateAndCleanResult(parsed: any): LLMResponse {
  return {
    petCharacteristics: Array.isArray(parsed.petCharacteristics) ? parsed.petCharacteristics : [],
    issues: Array.isArray(parsed.issues) ? parsed.issues : [],
    recommendationTypes: Array.isArray(parsed.recommendationTypes) ? parsed.recommendationTypes : [],
    specificRecommendations: Array.isArray(parsed.specificRecommendations) ? parsed.specificRecommendations : [],
    petVoiceResponse: parsed.petVoiceResponse ? {
      hasRegisteredPet: typeof parsed.petVoiceResponse.hasRegisteredPet === 'boolean' ? parsed.petVoiceResponse.hasRegisteredPet : false,
      petName: typeof parsed.petVoiceResponse.petName === 'string' ? parsed.petVoiceResponse.petName.replace(/\*\*/g, '').trim() : '',
      petBreed: typeof parsed.petVoiceResponse.petBreed === 'string' ? parsed.petVoiceResponse.petBreed.replace(/\*\*/g, '').trim() : '',
      voiceMessage: typeof parsed.petVoiceResponse.voiceMessage === 'string' ? 
        parsed.petVoiceResponse.voiceMessage
          .replace(/\*\*/g, '')
          .replace(/[\x00-\x1F\x7F]/g, ' ')
          .replace(/\s+/g, ' ')
          .trim() : '',
      emotionalTone: typeof parsed.petVoiceResponse.emotionalTone === 'string' ? parsed.petVoiceResponse.emotionalTone.replace(/\*\*/g, '').trim() : ''
    } : {
      hasRegisteredPet: false,
      petName: '',
      petBreed: '',
      voiceMessage: '',
      emotionalTone: ''
    }
  }
}

// Funci√≥n helper para obtener el plural correcto de las razas
function getPetBreedPlural(breed: string, petType: string): string {
  if (!breed) return petType === 'gato' ? 'gatos' : 'perros'
  
  const breedLower = breed.toLowerCase()
  
  // Casos especiales comunes
  if (breedLower.includes('europeo')) return breed.replace(/europeo/i, 'europeos')
  if (breedLower.includes('persa')) return breed.replace(/persa/i, 'persas')  
  if (breedLower.includes('siam√©s')) return breed.replace(/siam√©s/i, 'siameses')
  if (breedLower.includes('maine coon')) return breed + 's'
  if (breedLower.includes('retriever')) return breed + 's'
  if (breedLower.includes('pastor')) return breed + 'es'
  if (breedLower.includes('collie')) return breed + 's'
  if (breedLower.includes('bulldog')) return breed + 's'
  
  // Reglas generales
  if (breed.endsWith('o')) return breed.slice(0, -1) + 'os'
  if (breed.endsWith('a')) return breed.slice(0, -1) + 'as'
  if (breed.endsWith('√≠')) return breed + 'es'
  if (breed.endsWith('z')) return breed.slice(0, -1) + 'ces'
  
  // Por defecto, agregar 's'
  return breed + 's'
}

// Funci√≥n de fallback para extraer palabras clave sin LLM
function extractKeywordsFromQuery(query: string, userPet?: any, conversationHistory?: any[]): LLMResponse {
  const lowerQuery = query.toLowerCase()
  
  // Detectar temas espec√≠ficos en la pregunta
  const queryAnalysis = {
    isAboutFood: lowerQuery.includes('come') || lowerQuery.includes('comida') || lowerQuery.includes('alimenta') || lowerQuery.includes('hambre') || lowerQuery.includes('pienso') || lowerQuery.includes('dieta'),
    isAboutBehavior: lowerQuery.includes('ladra') || lowerQuery.includes('ladrido') || lowerQuery.includes('comporta') || lowerQuery.includes('obedece') || lowerQuery.includes('agresiv') || lowerQuery.includes('destructiv'),
    isAboutSounds: lowerQuery.includes('maull') || lowerQuery.includes('ruido') || lowerQuery.includes('vocal') || lowerQuery.includes('grita') || lowerQuery.includes('chilla'),
    isAboutHealth: lowerQuery.includes('enferm') || lowerQuery.includes('dolor') || lowerQuery.includes('mal') || lowerQuery.includes('s√≠ntoma') || lowerQuery.includes('veterinario') || lowerQuery.includes('salud'),
    isAboutMood: lowerQuery.includes('triste') || lowerQuery.includes('deca√≠do') || lowerQuery.includes('deprim') || lowerQuery.includes('feliz') || lowerQuery.includes('alegr') || lowerQuery.includes('√°nimo'),
    isAboutExercise: lowerQuery.includes('ejercicio') || lowerQuery.includes('juega') || lowerQuery.includes('pasea') || lowerQuery.includes('corr') || lowerQuery.includes('actividad') || lowerQuery.includes('camina'),
    isAboutTraining: lowerQuery.includes('entrena') || lowerQuery.includes('ense√±a') || lowerQuery.includes('aprend') || lowerQuery.includes('comando') || lowerQuery.includes('obediencia'),
    isAboutLitterBox: lowerQuery.includes('caja de arena') || lowerQuery.includes('ba√±o') || lowerQuery.includes('orin') || lowerQuery.includes('hace pis') || lowerQuery.includes('accidente'),
    isAboutGrooming: lowerQuery.includes('pelo') || lowerQuery.includes('cepill') || lowerQuery.includes('ba√±a') || lowerQuery.includes('lava') || lowerQuery.includes('aseo') || lowerQuery.includes('limpia'),
    isAboutSleep: lowerQuery.includes('duerme') || lowerQuery.includes('sue√±o') || lowerQuery.includes('descanso') || lowerQuery.includes('cama') || lowerQuery.includes('noche')
  }
  
  // Determinar caracter√≠sticas y problemas basados en el an√°lisis
  const foundCharacteristics = []
  const foundIssues = []
  const foundTypes = []
  
  if (userPet) {
    // Formatear edad correctamente
    const age = userPet.edad
    const ageText = typeof age === 'number' 
      ? `${age} ${age === 1 ? 'a√±o' : 'a√±os'}`
      : age.toString().includes('a√±o') 
        ? age.toString()
        : `${age} ${age === '1' || age === 1 ? 'a√±o' : 'a√±os'}`
    
    foundCharacteristics.push(userPet.tipo, userPet.raza, ageText)
  }
  
  // Agregar issues espec√≠ficos basados en el an√°lisis
  if (queryAnalysis.isAboutFood) {
    foundIssues.push('alimentaci√≥n', 'dieta')
    foundTypes.push('nutrition')
  }
  if (queryAnalysis.isAboutBehavior) {
    foundIssues.push('comportamiento', 'entrenamiento')
    foundTypes.push('training')
  }
  if (queryAnalysis.isAboutSounds) {
    foundIssues.push('vocalizaci√≥n', 'comunicaci√≥n')
    foundTypes.push('training')
  }
  if (queryAnalysis.isAboutHealth) {
    foundIssues.push('salud', 'bienestar')
    foundTypes.push('wellness')
  }
  if (queryAnalysis.isAboutMood) {
    foundIssues.push('bienestar emocional')
    foundTypes.push('wellness')
  }
  if (queryAnalysis.isAboutExercise) {
    foundIssues.push('ejercicio', 'actividad f√≠sica')
    foundTypes.push('wellness')
  }
  if (queryAnalysis.isAboutTraining) {
    foundIssues.push('entrenamiento', 'obediencia')
    foundTypes.push('training')
  }
  
  // Detectar si tiene mascota registrada
  const hasRegisteredPet = !!userPet || (lowerQuery.includes('mi ') && (lowerQuery.includes('perro') || lowerQuery.includes('gato') || lowerQuery.includes('mascota')))
  
  // Generar respuesta ESPEC√çFICA y DIRECTA basada en el tema detectado
  let voiceMessage = ''
  let emotionalTone = 'curioso'
  
  if (hasRegisteredPet && userPet) {
    const petName = userPet.nombre
    const petType = userPet.tipo
    const petBreed = userPet.raza
    const petAge = typeof userPet.edad === 'number' 
      ? `${userPet.edad} ${userPet.edad === 1 ? 'a√±o' : 'a√±os'}`
      : userPet.edad.toString().includes('a√±o') 
        ? userPet.edad.toString()
        : `${userPet.edad} ${userPet.edad === '1' || userPet.edad === 1 ? 'a√±o' : 'a√±os'}`
    const petBreedPlural = getPetBreedPlural(petBreed, petType)
    
    // Respuestas espec√≠ficas y directas por tema
    if (queryAnalysis.isAboutFood) {
      emotionalTone = 'hambriento'
      voiceMessage = `¬°${petType === 'gato' ? 'Miau' : 'Guau'}! Soy ${petName} y veo que preguntas sobre mi alimentaci√≥n. üçΩÔ∏è Como ${petBreed} de ${petAge}, mi relaci√≥n con la comida puede tener varias explicaciones.

Si pido comida constantemente, puede ser que mis porciones actuales no sean suficientes para mi peso y edad, o que la calidad del alimento no me est√© saciando. Si rechazo la comida, podr√≠a ser aburrimiento con el sabor, problemas dentales, o incluso estr√©s. Y si como muy r√°pido, es instinto de supervivencia, pero podr√≠a necesitar un comedero especial.

Te recomiendo que revises si mis porciones son correctas para ${petAge} y mi peso actual. Los ${petBreedPlural} tenemos necesidades nutricionales particulares. Si el problema persiste, una visita al veterinario ser√≠a ideal para descartar problemas de salud. üè•`
    } 
    else if (queryAnalysis.isAboutSounds && petType === 'gato') {
      emotionalTone = 'comunicativo'
              voiceMessage = `¬°Miau miau! Soy ${petName} y necesito explicarte mis vocalizaciones. üò∏ Como ${petBreed} de ${petAge}, cada maullido tiene un significado espec√≠fico.

Mis maullidos cortos son mi manera de decir "¬°Hola!" o pedir atenci√≥n. Los maullidos largos significan que tengo una necesidad urgente como hambre o que necesito que limpies mi ba√±o. Si maullo por la noche, puede ser ansiedad, soledad, o que mi rutina se alter√≥. Y cuando maullo cerca de ti, es porque quiero comunicarte algo espec√≠fico.

A ${petAge}, podr√≠a maullar m√°s por cambios en mi salud como hipotiroidismo o presi√≥n alta, dolor articular, o simplemente porque he aprendido que as√≠ consigo lo que quiero. Te sugiero que observes CU√ÅNDO maullo m√°s y QU√â consigo despu√©s. Si es por las noches, probablemente necesito m√°s estimulaci√≥n durante el d√≠a. üåô`
    }
    else if (queryAnalysis.isAboutBehavior && petType === 'perro') {
      emotionalTone = 'confundido'
              voiceMessage = `¬°Guau! Soy ${petName} y creo que mi comportamiento te est√° preocupando. üêï Como ${petBreed} de ${petAge}, mis acciones siempre tienen una raz√≥n.

Si ladro mucho, puede ser aburrimiento, ansiedad, territorialidad, o necesidad de atenci√≥n. Si soy destructivo, probablemente me falta ejercicio mental y f√≠sico, o tengo ansiedad por separaci√≥n. Y si no obedezco, necesito refuerzo consistente del entrenamiento.

Los ${petBreedPlural} tenemos caracter√≠sticas particulares de energ√≠a y necesidades mentales. A ${petAge}, mi nivel de actividad debe estar balanceado. Te sugiero que aumentes mi ejercicio diario adaptado a mi edad, me des juguetes mentales, refuerces comandos b√°sicos con premios, y mantengas rutinas consistentes.

¬øCu√°l de estos comportamientos espec√≠ficos te preocupa m√°s? üéæ`
    }
    else if (queryAnalysis.isAboutHealth) {
      emotionalTone = 'preocupado'
              voiceMessage = `${petType === 'gato' ? 'Miau...' : 'Guau...'} Soy ${petName} y entiendo tu preocupaci√≥n por mi salud. üòü Como ${petBreed} de ${petAge}, es importante que sepas qu√© se√±ales requieren atenci√≥n veterinaria inmediata.

Si notas cambios en mi apetito o consumo de agua, letargo inusual, v√≥mitos o diarrea persistente, dificultad para respirar, o cambios s√∫bitos en mi comportamiento, necesitamos ir al veterinario pronto. A mi edad de ${petAge}, debo tener chequeos regulares cada 6-12 meses, porque los ${petBreedPlural} podemos tener predisposiciones gen√©ticas espec√≠ficas que debemos monitorear.

Si notas algo espec√≠fico, anota cu√°ndo ocurre, la frecuencia, y las circunstancias. Esta informaci√≥n es invaluable para el veterinario. ¬øHay alg√∫n s√≠ntoma espec√≠fico que has notado? Mi salud es prioridad y actuar r√°pido siempre es mejor. üè•üíï`
    }
    else if (queryAnalysis.isAboutExercise) {
      emotionalTone = 'emocionado'
              voiceMessage = `¬°${petType === 'gato' ? 'Miau' : 'Guau'}! Me ENCANTA hablar de ejercicio. üéæ Como ${petBreed} de ${petAge}, tengo un nivel de energ√≠a que necesita ser canalizado de forma adecuada. Los ${petBreedPlural} tenemos caracter√≠sticas f√≠sicas espec√≠ficas que afectan c√≥mo debemos ejercitarnos.

A mi edad de ${petAge}, ${typeof userPet.edad === 'number' && userPet.edad < 2 ? 'necesito mucha energ√≠a pero cuidando mis articulaciones que a√∫n est√°n creciendo' : typeof userPet.edad === 'number' && userPet.edad < 7 ? 'estoy en mi mejor momento f√≠sico y puedo manejar ejercicio intenso' : 'necesito ejercicio adaptado, menos intenso pero constante'}.

${petType === 'perro' ? 'Me encantan las caminatas diarias adaptadas a mi resistencia, los juegos de buscar y traer, y si es posible, la nataci√≥n que es excelente para mis articulaciones' : 'Disfruto much√≠simo los juguetes interactivos y de caza, los rascadores y estructuras para escalar, y las sesiones de juego de 10-15 minutos varias veces al d√≠a'}.

¬øQuieres que planifiquemos una rutina espec√≠fica? ¬°Estoy listo para la aventura! üåü`
    }
         else if (queryAnalysis.isAboutTraining) {
       emotionalTone = 'listo para aprender'
       voiceMessage = `¬°${petType === 'gato' ? 'Miau' : 'Guau'}! Me emociona que hablemos sobre mi entrenamiento. üéì Como ${petBreed} de ${petAge}, tengo capacidades espec√≠ficas para aprender.

${petType === 'perro' ? 'Los perros como yo aprendemos mejor con refuerzo positivo y rutinas consistentes' : 'Los gatos aprendemos a trav√©s de motivaci√≥n y respeto a nuestros instintos naturales'}. Mi edad de ${petAge} significa que ${typeof userPet.edad === 'number' && userPet.edad < 2 ? 'estoy en la etapa perfecta para aprender comandos b√°sicos' : typeof userPet.edad === 'number' && userPet.edad < 7 ? 'puedo aprender comandos complejos y trucos avanzados' : 'puedo seguir aprendiendo, aunque necesito m√°s paciencia'}.

Los comandos esenciales para empezar incluyen ${petType === 'perro' ? '"Sit" y "Stay" que son fundamentales, "Come" que es crucial para seguridad, "Down" para relajaci√≥n, y "Leave it" que es muy importante' : 'responder al nombre, venir cuando se me llama, usar el rascador correctamente, y respetar l√≠mites de espacios'}.

Mi consejo es que hagamos sesiones cortas de 5-10 minutos, uses premios que realmente me motiven, y tengas mucha paciencia conmigo. ¬°Estoy listo para aprender contigo! üìö`
     }
     else if (queryAnalysis.isAboutMood) {
       emotionalTone = 'reflexivo'
       voiceMessage = `${petType === 'gato' ? 'Miau...' : 'Guau...'} Quiero hablarte sobre c√≥mo me siento. üí≠ Como ${petBreed} de ${petAge}, mis emociones pueden cambiar por varias razones.

Si estoy triste o deca√≠do, puede ser por cambios en la rutina familiar, menos tiempo contigo, problemas de salud no detectados, falta de estimulaci√≥n mental, o incluso cambios de estaci√≥n o clima. Si estoy m√°s feliz o energ√©tico de lo normal, probablemente hay nuevos est√≠mulos interesantes, m√°s atenci√≥n y juegos, mejor alimentaci√≥n, o una rutina de ejercicio adecuada.

A mi edad espec√≠fica, los ${petType}s de ${petAge} ${typeof userPet.edad === 'number' && userPet.edad < 3 ? 'podemos tener cambios de humor por crecimiento y desarrollo' : typeof userPet.edad === 'number' && userPet.edad < 8 ? 'generalmente somos emocionalmente estables si nuestras necesidades est√°n cubiertas' : 'podemos necesitar m√°s cuidados especiales que afectan nuestro bienestar emocional'}.

Mi recomendaci√≥n es que observes qu√© cambi√≥ en mi ambiente cuando notaste el cambio de humor. ¬°Y recuerda que a veces solo necesito m√°s mimos! ü§ó`
     }
     else if (queryAnalysis.isAboutLitterBox && petType === 'gato') {
       emotionalTone = 'culpable'
       voiceMessage = `Miau... Necesito explicarte sobre mis problemas con la caja de arena. üòø Como ${petBreed} de ${petAge}, esto es muy importante para m√≠.

Podr√≠a estar evitando mi caja porque est√° muy sucia, no me gusta el tipo de arena nuevo, la caja est√° en un lugar muy ruidoso o transitado, tengo problemas de salud como infecci√≥n urinaria o dolor, hay estr√©s por cambios en casa, o la caja es muy peque√±a para mi tama√±o.

Recuerda que necesito que la limpies diariamente, es esencial para m√≠. Tambi√©n necesito una caja por gato m√°s una extra, arena sin perfumes fuertes, y una ubicaci√≥n tranquila pero accesible.

Si es urgente, si orino fuera de la caja con frecuencia, podr√≠a ser una infecci√≥n urinaria. ¬°Por favor ll√©vame al veterinario pronto! A mi edad, es importante descartar problemas m√©dicos. No lo hago para molestarte, ¬°prometo! üôè`
     }
    else {
      // Respuesta directa pidiendo especificidad 
      emotionalTone = 'curioso'
      voiceMessage = `¬°${petType === 'gato' ? 'Miau' : 'Guau'}! Veo que tienes una pregunta para m√≠, pero necesito que seas m√°s espec√≠fico para darte la mejor respuesta. üêæ

Tu pregunta podr√≠a ser sobre mi alimentaci√≥n o h√°bitos de comida, mis vocalizaciones o ruidos, ejercicio y actividades, mi estado de √°nimo o comportamiento, mi salud o s√≠ntomas f√≠sicos, o problemas en casa como el ba√±o o destructividad.

Como ${petBreed} de ${petAge}, tengo caracter√≠sticas espec√≠ficas de mi raza y edad que influyen en todo lo que hago. Cu√©ntame exactamente qu√© te preocupa y te dar√© una respuesta detallada y √∫til.

¬°Estoy aqu√≠ para ayudarte a entenderme mejor! üíï`
    }
  } else {
    voiceMessage = "¬°Hola! üêæ Me encanta que quieras saber m√°s sobre el comportamiento de las mascotas. Para darte la mejor respuesta, ¬øpodr√≠as contarme m√°s detalles sobre tu pregunta espec√≠fica? Cada situaci√≥n es √∫nica y me gustar√≠a ayudarte de la manera m√°s precisa posible."
  }
  
  return {
    petCharacteristics: foundCharacteristics,
    issues: foundIssues,
    recommendationTypes: foundTypes.length > 0 ? foundTypes : ['wellness'],
    specificRecommendations: [],
    petVoiceResponse: {
      hasRegisteredPet: hasRegisteredPet,
      petName: userPet?.nombre || '',
      petBreed: userPet?.raza || '',
      voiceMessage: voiceMessage,
      emotionalTone: emotionalTone
    }
  }
}
